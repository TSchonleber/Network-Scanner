# vulnerability_checker.py

import requests
from utils import setup_logger

logger = setup_logger()

def get_cves(service, version):
    """
    Fetch CVEs related to a specific service and version using the CIRCL CVE API.
    """
    api_url = f"https://cve.circl.lu/api/search/{service}"
    try:
        response = requests.get(api_url, timeout=5)
        if response.status_code == 200:
            cves = response.json()
            relevant_cves = [cve for cve in cves if version in cve.get('summary', '')]
            logger.info(f"Found {len(relevant_cves)} CVEs for {service} version {version}")
            return relevant_cves
        else:
            logger.error(f"Failed to fetch CVEs: HTTP {response.status_code}")
            return []
    except Exception as e:
        logger.error(f"Error fetching CVEs: {e}")
        return []

def format_cve(cve):
    """
    Format CVE data for reporting.
    """
    return {
        'id': cve.get('id', 'N/A'),
        'summary': cve.get('summary', 'No summary available.'),
        'cvss_score': cve.get('cvss', 'N/A'),
        'published_date': cve.get('Published', 'N/A')
    }

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Vulnerability Checker")
    parser.add_argument('--service', required=True, help='Service name')
    parser.add_argument('--version', required=True, help='Service version')
    args = parser.parse_args()

    service = args.service
    version = args.version

    cves = get_cves(service, version)
    formatted_cves = [format_cve(cve) for cve in cves]

    for cve in formatted_cves:
        print(f"{cve['id']}: {cve['summary']} (CVSS: {cve['cvss_score']})")
